function fsem() {
	w = {};
	ei = 0;
	var e = 1;
	var t = Math.floor(stlv / 10);
	if (t > 4) {
		t = 4
	}
	switch (t) {
	case 0:
		ekey = Math.floor(Math.random() * 6);
		break;
	case 1:
		ekey = Math.floor(Math.random() * 14) + 6;
		break;
	case 2:
		ekey = Math.floor(Math.random() * 56) + 14;
		if (hthp > 4) {
			ekey = Math.floor(Math.random() * 120) + 14
		}
		break;
	case 3:
		ekey = Math.floor(Math.random() * 96) + 14;
		if (hthp > 3) {
			ekey = Math.floor(Math.random() * 64) + 70
		}
		break;
	case 4:
		ekey = Math.floor(Math.random() * 64) + 70;
		break;
	default:
		break
	}
	if (uekey == ekey) {
		ekey++
	}
	if (ekey > 133) {
		ekey = 133
	}
	uekey = ekey;
	switch (ekey) {
	case 0:
		for (e = 1; e < 4; e++) {
			Q(160, 150 - e * 25, e * 5, 1)
		}
		break;
	case 1:
		for (e = 1; e < 4; e++) {
			Q(160, 150 - e * 35, e * 5, 0)
		}
		break;
	case 2:
		for (e = 1; e < 6; e++) {
			Q(70 + e * 30, 80, e * 5, 2)
		}
		edct = 240;
		break;
	case 3:
		for (e = 1; e < 4; e++) {
			Q(98 + e * 31, 40, 0, 0)
		}
		break;
	case 4:
		for (e = 1; e < 6; e++) {
			Q(73 + e * 29, 50, 0, 1)
		}
		break;
	case 5:
		for (e = 1; e < 6; e++) {
			Q(40 + e * 40, 50, 0, 0)
		}
		break;
	case 6:
		for (e = 1; e < 6; e++) {
			if (e != 3) {
				Q( - 20 + e * 60, 50, 0, 2)
			} else {
				Q( - 20 + e * 60, 50, 0, 1)
			}
		}
		edct = 240;
		break;
	case 7:
		for (e = 1; e < 4; e++) {
			Q(100, 100 - e * 25, e * 5, 1)
		}
		for (e = 1; e < 4; e++) {
			Q(220, 100 - e * 25, e * 5, 1)
		}
		break;
	case 8:
		for (e = 1; e < 4; e++) {
			Q(100, 130 - e * 35, e * 5, 0)
		}
		for (e = 1; e < 4; e++) {
			Q(220, 130 - e * 35, e * 5, 0)
		}
		break;
	case 9:
		Q(100, 0, 0, 5);
		Q(220, 0, 70, 5);
		Q(160, 0, 140, 5);
		break;
	case 10:
		for (e = 1; e < 6; e++) {
			Q(50, 50, e * 25, 3)
		}
		for (e = 1; e < 6; e++) {
			Q(270, 50, 200 + e * 25, 4)
		}
		break;
	case 11:
		for (e = 1; e < 6; e++) {
			Q(50, 50, e * 25, 3)
		}
		break;
	case 12:
		for (e = 1; e < 6; e++) {
			Q(40 + e * 40, 50, 0, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(60 + e * 40, 50, 100, 1)
		}
		for (e = 1; e < 6; e++) {
			Q(40 + e * 40, 50, 200, 1)
		}
		break;
	case 13:
		for (e = 1; e < 6; e++) {
			Q(180, 215 - e * 30, e * 14, 1);
			Q(140, 200 - e * 30, 7 + e * 14, 1)
		}
		break;
	case 14:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 50, 50, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 60, 50, 0, 0)
		}
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 50, 350, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 60, 50, 400, 1)
		}
		break;
	case 15:
		for (e = 1; e < 6; e++) {
			Q(150 + e * 30, 200 - e * 30, e * 5, 0);
			Q(170 - e * 30, 200 - e * 30, e * 5, 0)
		}
		break;
	case 16:
		for (e = 1; e < 6; e++) {
			Q(150 + e * 30, 200 - e * 30, e * 5, 1);
			Q(170 - e * 30, 200 - e * 30, e * 5, 1)
		}
		break;
	case 17:
		for (e = 1; e < 6; e++) {
			Q(150 + e * 30, 200 - e * 30, e * 25, 3);
			Q(170 - e * 30, 200 - e * 30, e * 25, 4)
		}
		break;
	case 18:
		for (e = 1; e < 6; e++) {
			Q(10 + e * 30, 300, e * 5, 2);
			Q(310 - e * 30, 250, 200 + e * 5, 2);
			Q(10 + e * 30, 200, 300 + e * 5, 2);
			Q(310 - e * 30, 150, 350 + e * 5, 2);
			Q(10 + e * 30, 100, 400 + e * 5, 2)
		}
		edct = 240;
		break;
	case 19:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 100, 0, 0)
		}
		Q(70, -20, 100, 5);
		Q(190, -20, 150, 5);
		Q(250, -20, 200, 5);
		Q(130, -20, 250, 5);
		break;
	case 20:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 50, 0, 0)
		}
		Q(70, 80, 100, 1);
		Q(190, 80, 100, 1);
		Q(250, 80, 100, 1);
		Q(130, 80, 100, 1);
		Q(70, 50, 150, 1);
		Q(190, 50, 150, 1);
		Q(250, 50, 150, 1);
		Q(130, 50, 150, 1);
		Q(70, 20, 200, 1);
		Q(190, 20, 200, 1);
		Q(250, 20, 200, 1);
		Q(130, 20, 200, 1);
		break;
	case 21:
		for (e = 1; e < 15; e++) {
			Q(30, 30, e * 25, 3)
		}
		for (e = 1; e < 5; e++) {
			Q(60 + e * 40, 100, 100, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(60 + e * 40, 100, 200, 1)
		}
		for (e = 1; e < 15; e++) {
			Q(290, 30, 250 + e * 25, 3)
		}
		break;
	case 22:
		for (e = 1; e < 11; e++) {
			Q(30, 60, e * 30, 3)
		}
		for (e = 1; e < 11; e++) {
			Q(30, 110, 15 + e * 30, 3)
		}
		for (e = 1; e < 11; e++) {
			Q(290, 20, 330 + e * 30, 4)
		}
		for (e = 1; e < 11; e++) {
			Q(290, 70, 345 + e * 30, 4)
		}
		break;
	case 23:
		for (e = 1; e < 10; e++) {
			Q(70, 100, e * 45, 4)
		}
		for (e = 1; e < 6; e++) {
			Q(160, 20, e * 95, 0)
		}
		for (e = 1; e < 10; e++) {
			Q(250, 100, e * 45, 3)
		}
		break;
	case 24:
		for (e = 1; e < 10; e++) {
			Q(190, 50, e * 45, 3)
		}
		for (e = 1; e < 6; e++) {
			Q(160, -20, e * 150, 5)
		}
		for (e = 1; e < 10; e++) {
			Q(130, 50, e * 45, 4)
		}
		break;
	case 25:
		for (e = 1; e < 4; e++) {
			Q(100 + e * 30, -20, 0, 5)
		}
		for (e = 1; e < 4; e++) {
			Q(20 + e * 30, -20, 150, 5)
		}
		for (e = 1; e < 4; e++) {
			Q(200 + e * 30, -20, 300, 5)
		}
		break;
	case 26:
		Q(40, -20, 0, 5);
		Q(280, -20, 100, 5);
		for (e = 1; e < 8; e++) {
			Q(40 + e * 30, 100, 0, 1)
		}
		for (e = 1; e < 8; e++) {
			Q(280 - e * 30, 50, e * 25, 3)
		}
		break;
	case 27:
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 80, 25, 0)
		}
		for (e = 1; e < 7; e++) {
			Q(280, 50, e * 25, 4)
		}
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 80, 350, 0)
		}
		for (e = 1; e < 7; e++) {
			Q(280, 50, 325 + e * 25, 4)
		}
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 80, 675, 0)
		}
		for (e = 1; e < 7; e++) {
			Q(280, 50, 650 + e * 25, 4)
		}
		break;
	case 28:
		for (e = 1; e < 4; e++) {
			Q( - 30 + e * 60, 100, 0, 0)
		}
		for (e = 1; e < 4; e++) {
			Q(30 + e * 60, 70, 25, 0)
		}
		for (e = 1; e < 4; e++) {
			Q(90 + e * 60, 40, 50, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 60, -8, 0, 5)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 60, 80, 100, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 60, 60, 130, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 60, 40, 160, 1)
		}
		break;
	case 29:
		for (e = 1; e < 4; e++) {
			Q(40 + e * 30, 100, 0, 1);
			Q(160 + e * 30, 100, 100, 1);
			Q(40 + e * 30, 100, 200, 1);
			Q(160 + e * 30, 100, 300, 1);
			Q(40 + e * 30, 100, 400, 1);
			Q(160 + e * 30, 100, 500, 1)
		}
		Q(160, -20, 0, 5);
		Q(40, -20, 100, 5);
		Q(280, -20, 200, 5);
		Q(160, -20, 300, 5);
		Q(280, -20, 400, 5);
		Q(40, -20, 500, 5);
		break;
	case 30:
		for (e = 1; e < 10; e++) {
			Q(190, 60, e * 25, 3);
			Q(130, 60, e * 25, 4)
		}
		Q(160, 20, 0, 6);
		break;
	case 31:
		Q(210, -20, 0, 5);
		Q(120, -20, 40, 5);
		Q(170, -20, 80, 5);
		for (e = 1; e < 10; e++) {
			Q(50, 50, 100 + e * 20, 3)
		}
		for (e = 1; e < 9; e++) {
			Q(40 + e * 30, 100, 180, 1);
			Q(30, 30, 220 + e * 90, 0)
		}
		break;
	case 32:
		for (e = 1; e < 10; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			Q(xp, -20, -40 + e * 40, 5)
		}
		for (e = 1; e < 10; e++) {
			Q(50, 50, 50 + e * 50, 3);
			Q(270, 50, 75 + e * 50, 4)
		}
		break;
	case 33:
		for (e = 1; e < 6; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			Q(xp, -20, -40 + e * 40, 5)
		}
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, -30, 240, 1);
			Q( - 20 + e * 60, -110, 240, 1);
			Q( - 20 + e * 60, -190, 240, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, -70, 240, 1);
			Q(10 + e * 60, -150, 240, 1);
			Q(10 + e * 60, -230, 240, 1)
		}
		break;
	case 34:
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 10 + e * 30, e * 10, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, 310 - e * 30, 90 + e * 10, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(160 + e * 30, 160 - e * 30, 130 + e * 10, 2)
		}
		edct = 240;
		break;
	case 35:
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, 25, 0, 1);
			Q(10 + e * 30, 25, 100, 1);
			Q(160 + e * 30, 25, 200, 0);
			Q(160 + e * 30, 25, 350, 0)
		}
		for (e = 1; e < 20; e++) {
			Q(280, 20, 400 + e * 20, 3)
		}
		Q(190, -20, 0, 5);
		Q(280, -20, 50, 5);
		Q(240, -20, 100, 5);
		Q(40, -20, 450, 5);
		Q(130, -20, 500, 5);
		Q(70, -20, 550, 5);
		break;
	case 36:
		for (e = 1; e < 20; e++) {
			Q(160, 40 + e * 10, 130 + e * 25, 3)
		}
		Q(160, -20, 0, 0);
		for (e = 1; e < 20; e++) {
			Q(160, 40 + e * 10, 430 + e * 25, 4)
		}
		Q(160, -20, 300, 6);
		break;
	case 37:
		Q(100, 40, 0, 0);
		Q(220, 40, 0, 0);
		for (e = 1; e < 20; e++) {
			Q(100, 30, e * 50, 3);
			Q(220, 30, 25 + e * 50, 4)
		}
		Q(130, -20, 150, 5);
		Q(160, -20, 250, 5);
		Q(190, -20, 300, 5);
		Q(130, -20, 350, 5);
		break;
	case 38:
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 50, e * 25, 4)
		}
		for (e = 1; e < 9; e++) {
			Q(280 - e * 30, 50, 225 + e * 25, 3)
		}
		for (e = 1; e < 9; e++) {
			Q(40 + e * 30, 50, 425 + e * 25, 4)
		}
		for (e = 1; e < 9; e++) {
			Q(280 - e * 30, 50, 625 + e * 25, 3)
		}
		for (e = 1; e < 8; e++) {
			Q(0 + e * 40, 90, 100, 0)
		}
		break;
	case 39:
		for (e = 1; e < 14; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			lr = Math.floor(Math.random() * 2) + 3;
			Q(xp, 85 - e * 5, e * 30, lr)
		}
		Q(100, -20, 360, 5);
		Q(160, -20, 400, 5);
		break;
	case 40:
		Q(65, 110, 0, 2);
		Q(256, 110, 0, 2);
		Q(65, 260, 0, 2);
		Q(256, 260, 0, 2);
		for (e = 1; e < 7; e++) {
			Q(67 + e * 27, 180 - e * 24, e * 5, 1)
		}
		edct = 240;
		break;
	case 41:
		Q(128, 170, 0, 1);
		Q(160, 170, 0, 1);
		Q(192, 170, 0, 1);
		Q(128, 130, 90, 1);
		Q(160, 130, 90, 1);
		Q(192, 130, 90, 1);
		Q(128, 90, 180, 1);
		Q(160, 90, 180, 1);
		Q(192, 90, 180, 1);
		for (e = 1; e < 4; e++) {
			Q(222, 69 + e * 27, 45 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(98, 123 + e * 27, 45 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(222, 177 + e * 27, 45 + e * 5, 2)
		}
		edct = 240;
		break;
	case 42:
		for (e = 1; e < 3; e++) {
			Q(10 + e * 30, 30, 0, 0);
			Q(220 + e * 30, 30, 0, 0)
		}
		for (e = 1; e < 6; e++) {
			Q(70 + e * 30, 38, 25, 1)
		}
		for (e = 1; e < 15; e++) {
			Q(160, 30, 70 + e * 25, 3)
		}
		break;
	case 43:
		for (e = 1; e < 3; e++) {
			Q(10 + e * 30, 30, 0, 1);
			Q(220 + e * 30, 30, 0, 1)
		}
		for (e = 1; e < 6; e++) {
			Q(70 + e * 30, 88, 60, 0)
		}
		for (e = 1; e < 15; e++) {
			Q(160, 80, 85 + e * 25, 3)
		}
		break;
	case 44:
		for (e = 1; e < 3; e++) {
			Q(0 + e * 30, 30, 0, 1);
			Q(230 + e * 30, 30, 0, 1);
			Q(0 + e * 30, 30, 100, 1);
			Q(230 + e * 30, 30, 100, 1);
			Q(0 + e * 30, 30, 200, 1);
			Q(230 + e * 30, 30, 200, 1)
		}
		for (e = 1; e < 4; e++) {
			Q(40 + e * 60, 38, 0, 0);
			Q(40 + e * 60, 38, 100, 0)
		}
		Q(130, -20, 100, 5);
		Q(190, -20, 200, 5);
		Q(130, -20, 300, 5);
		Q(190, -20, 400, 5);
		break;
	case 45:
		for (e = 1; e < 3; e++) {
			Q(50 + e * 30, 70, 20, 1);
			Q(110 + e * 30, 50, 40, 1);
			Q(170 + e * 30, 30, 60, 1)
		}
		for (e = 1; e < 3; e++) {
			Q(50 + e * 30, 70, 20 + 300, 1);
			Q(110 + e * 30, 50, 40 + 300, 1);
			Q(170 + e * 30, 30, 60 + 300, 1)
		}
		Q(30, -20, 0, 5);
		Q(290, -20, 0, 5);
		Q(30, -20, 200, 5);
		Q(290, -20, 200, 5);
		Q(30, -20, 400, 5);
		Q(290, -20, 400, 5);
		break;
	case 46:
		for (e = 1; e < 10; e++) {
			Q(160, 40, -50 + e * 50, 3);
			Q(160, 40, -25 + e * 50, 4)
		}
		for (e = 1; e < 8; e++) {
			Q(40 + e * 30, 40, 600, 0)
		}
		Q(30, -20, 0, 1);
		Q(290, -20, 0, 1);
		Q(30, -20, 200, 1);
		Q(290, -20, 200, 1);
		Q(30, -20, 400, 1);
		Q(290, -20, 400, 1);
		Q(30, -20, 600, 1);
		Q(290, -20, 600, 1);
		break;
	case 47:
		for (e = 1; e < 6; e++) {
			Q(160, -20 - e * 35, 0, 5);
			Q(70, -20 - e * 35, 100, 5);
			Q(250, -20 - e * 35, 200, 5)
		}
		break;
	case 48:
		for (e = 1; e < 10; e++) {
			Q(160, 40, e * 50, 3);
			Q(160, 40, 500 + e * 50, 4)
		}
		for (e = 1; e < 10; e++) {
			Q(130, 40, e * 50, 1);
			Q(190, 40, 500 + e * 50, 1)
		}
		for (e = 1; e < 4; e++) {
			Q(10 + e * 30, 40, 100 + e * 50, 0);
			Q(310 - e * 30, 40, 500 + e * 50, 0)
		}
		break;
	case 49:
		for (e = 1; e < 10; e++) {
			Q(120, 40, e * 50, 1);
			Q(200, 40, e * 50, 1)
		}
		for (e = 1; e < 4; e++) {
			Q(120 - e * 30, 40, 100 + e * 50, 0);
			Q(200 + e * 30, 40, 100 + e * 50, 0)
		}
		break;
	case 50:
		Q(100, 30, 0, 0);
		Q(100, 60, 15, 1);
		Q(100, 95, 30, 5);
		Q(220, 30, 0 + 50, 0);
		Q(220, 60, 15 + 50, 1);
		Q(220, 95, 30 + 50, 5);
		Q(160, 30, 0 + 100, 0);
		Q(160, 60, 15 + 100, 1);
		Q(160, 95, 30 + 100, 5);
		break;
	case 51:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 150, e * 5, 2);
			Q( - 20 + e * 60, 100, 150 + e * 5, 2);
			Q( - 20 + e * 60, 50, 300 + e * 5, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, -20, 0, 5);
			Q(10 + e * 60, -20, 120, 1);
			Q(10 + e * 60, -20, 200, 0)
		}
		edct = 240;
		break;
	case 52:
		for (e = 1; e < 25; e++) {
			Q(160, 50, e * 25, 3)
		}
		for (e = 1; e < 6; e++) {
			Q(70, 30 + e * 30, e * 15, 0)
		}
		for (e = 1; e < 6; e++) {
			Q(250, 200 - e * 20, 50 + e * 15, 1)
		}
		break;
	case 53:
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 50, -85 + e * 85, 0);
			Q(10 + e * 30, 80, -85 + e * 85, 1)
		}
		break;
	case 54:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 70, 0, 0);
			Q( - 20 + e * 60, 120, 100, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, -20, 0, 5)
		}
		break;
	case 55:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 90, 0, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 120, 0, 1)
		}
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 50, 70, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 80, 70, 0)
		}
		break;
	case 56:
		for (e = 1; e < 4; e++) {
			Q( - 80 + e * 120, 50, 0, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 80, 0, 1)
		}
		for (e = 1; e < 3; e++) {
			Q( - 10 + e * 110, 110, 0, 1)
		}
		break;
	case 57:
		for (e = 1; e < 4; e++) {
			Q( - 80 + e * 120, 110, 0, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 80, 0, 0)
		}
		for (e = 1; e < 3; e++) {
			Q( - 10 + e * 110, 50, 0, 0)
		}
		break;
	case 58:
		for (e = 1; e < 4; e++) {
			Q(70, 0 + e * 40, 50, 0);
			Q(130, 0 + e * 40, 50, 0);
			Q(190, 0 + e * 40, 50, 0);
			Q(250, 0 + e * 40, 50, 0)
		}
		Q(100, -50, 0, 5);
		Q(160, -50, 0, 5);
		Q(220, -50, 0, 5);
		break;
	case 59:
		for (e = 1; e < 6; e++) {
			Q(40 + e * 40, 40, 0, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(240, 40 + e * 40, 0, 0);
			Q(240 - e * 40, 200, 0, 0)
		}
		break;
	case 60:
		for (e = 1; e < 6; e++) {
			Q(40 + e * 40, 40, 0, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(80, 40 + e * 40, 0, 1);
			Q(280 - e * 40, 120, 0, 1);
			Q(280 - e * 40, 200, 0, 1)
		}
		break;
	case 61:
		for (e = 1; e < 4; e++) {
			Q(80 + e * 40, 40, 0, 1)
		}
		for (e = 1; e < 6; e++) {
			Q(80, 0 + e * 40, 0, 0);
			Q(240, 0 + e * 40, 0, 0)
		}
		break;
	case 62:
		for (e = 1; e < 8; e++) {
			Q(0 + e * 40, -30, 0 + e * 20, 5)
		}
		break;
	case 63:
		for (e = 1; e < 5; e++) {
			Q( - 40 + e * 80, 20 + e * 20, 30, 1)
		}
		for (e = 1; e < 4; e++) {
			Q(0 + e * 80, -30, 0, 5)
		}
		break;
	case 64:
		for (e = 1; e < 5; e++) {
			Q( - 40 + e * 80, -40, -100 + e * 100, 9)
		}
		break;
	case 65:
		Q(80, -40, 0, 9);
		Q(240, -40, 150, 9);
		Q(120, -40, 50, 5);
		Q(200, -40, 100, 5);
		break;
	case 66:
		for (e = 1; e < 6; e++) {
			Q(10 + e * 30, -10 + e * 30, 0, 1);
			Q(10 + e * 30, -10 + e * 30, 150, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 30, -10 + e * 30, 0, 0);
			Q(310 - e * 30, -10 + e * 30, 150, 0)
		}
		break;
	case 67:
		for (e = 1; e < 6; e++) {
			Q(40, -40, -150 + e * 150, 5);
			Q(280, -40, -75 + e * 150, 5)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 40, 0, 1);
			Q(10 + e * 60, 40, 200, 1);
			Q(10 + e * 60, 40, 300, 1);
			Q(10 + e * 60, 40, 400, 0)
		}
		break;
	case 68:
		for (e = 1; e < 26; e++) {
			Q(160, 60, -40 + e * 40, 1)
		}
		for (e = 1; e < 14; e++) {
			Q(100, 90, -100 + e * 100, 0);
			Q(220, 90, -100 + e * 100, 0)
		}
		break;
	case 69:
		Q(160, 60, 300, 3);
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 90, -30 + e * 30, 1);
			Q(10 + e * 30, 90, 30 + e * 30, 0)
		}
		break;
	case 70:
		Q(160, 50, 0, 3);
		Q(160, 65, 0, 1);
		Q(160, 50, 45, 4);
		for (e = 1; e < 15; e++) {
			Q(160, 50, e * 90, 3)
		}
		for (e = 1; e < 29; e++) {
			Q(160, 65, e * 45, 1)
		}
		for (e = 1; e < 15; e++) {
			Q(160, 50, 45 + e * 90, 4)
		}
		break;
	case 71:
		for (e = 1; e < 10; e++) {
			Q(70, 50, e * 45, 4)
		}
		for (e = 1; e < 10; e++) {
			Q(70, 65, e * 45, 1)
		}
		for (e = 1; e < 10; e++) {
			Q(250, 50, e * 45, 3)
		}
		for (e = 1; e < 10; e++) {
			Q(250, 65, e * 45, 1)
		}
		break;
	case 72:
		for (e = 1; e < 40; e++) {
			xp = (Math.floor(Math.random() * 15) + 1) * 20;
			Q(xp, 80, e * 30, 1)
		}
		break;
	case 73:
		for (e = 1; e < 12; e++) {
			Q(100, 150 - e * 10, e * 25, 1)
		}
		for (e = 1; e < 6; e++) {
			Q(220, 180 - e * 30, 200 + e * 25, 0)
		}
		for (e = 1; e < 6; e++) {
			Q(40, 180 - e * 30, 300 + e * 25, 0)
		}
		for (e = 1; e < 12; e++) {
			Q(280, 150 - e * 10, 400 + e * 25, 1)
		}
		Q(140, -20, 400, 5);
		Q(180, -20, 400, 5);
		break;
	case 74:
		for (e = 1; e < 5; e++) {
			Q(160 + e * 30, 60, 0, 1);
			Q(160 + e * 30, 60, 100, 1);
			Q(160 + e * 30, 60, 200, 1);
			Q(160 + e * 30, 60, 300, 1);
			Q(160 + e * 30, 60, 400, 1);
			Q(160 + e * 30, 60, 500, 1)
		}
		for (e = 1; e < 6; e++) {
			Q(100, 200 - e * 30, 40 + e * 5, 0)
		}
		Q(40, -20, 200, 5);
		Q(160, -20, 300, 5);
		Q(40, -20, 400, 5);
		break;
	case 75:
		for (e = 1; e < 4; e++) {
			Q(150 - e * 30, 60, e * 10, 1);
			Q(170 + e * 30, 60, e * 10, 1);
			Q(150 - e * 30, 60, 100 + e * 10, 1);
			Q(170 + e * 30, 60, 100 + e * 10, 1);
			Q(150 - e * 30, 60, 200 + e * 10, 1);
			Q(170 + e * 30, 60, 200 + e * 10, 1)
		}
		Q(160, 60, 10, 6);
		break;
	case 76:
		Q(40, -10, 0, 5);
		Q(280, -10, 0, 5);
		Q(70, -10, 100, 5);
		Q(250, -10, 100, 5);
		Q(100, -10, 200, 5);
		Q(220, -10, 200, 5);
		for (e = 1; e < 6; e++) {
			Q(70 + e * 30, 100, 300 + e * 5, 2);
			Q(70 + e * 30, 50, 400 + e * 5, 2)
		}
		Q(160, 60, 10, 6);
		edct = 240;
		break;
	case 77:
		for (e = 1; e < 6; e++) {
			Q(160, 70, 20 + e * 70, 0)
		}
		Q(160, 70, 0, 6);
		for (e = 1; e < 5; e++) {
			Q(160 + e * 30, 70, 370 + e * 70, 0);
			Q(160 - e * 30, 70, 370 + e * 70, 0)
		}
		Q(160, 70, 720, 6);
		break;
	case 78:
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, 120, 0, 1);
			Q(10 + e * 30, 30, 0, 1)
		}
		for (e = 1; e < 3; e++) {
			Q(40, 30 + e * 30, 0, 1);
			Q(130, 30 + e * 30, 0, 1)
		}
		Q(160, -20, 150, 5);
		Q(160, -60, 150, 5);
		Q(160, -100, 150, 5);
		for (e = 1; e < 5; e++) {
			Q(160 + e * 30, 120, 250, 1);
			Q(160 + e * 30, 30, 250, 1)
		}
		for (e = 1; e < 3; e++) {
			Q(190, 30 + e * 30, 250, 1);
			Q(280, 30 + e * 30, 250, 1)
		}
		Q(160, -20, 400, 5);
		Q(160, -60, 400, 5);
		Q(160, -100, 400, 5);
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, 120, 500, 1);
			Q(10 + e * 30, 30, 500, 1)
		}
		for (e = 1; e < 3; e++) {
			Q(40, 30 + e * 30, 500, 1);
			Q(130, 30 + e * 30, 500, 1)
		}
		break;
	case 79:
		Q(160, 40, 0, 6);
		for (e = 1; e < 5; e++) {
			Q( - 10 + e * 30, 100 + e * 30, 100 + e * 10, 2);
			Q(180 + e * 30, 250 - e * 30, 200 + e * 10, 2)
		}
		Q(70, 50, 300, 2);
		Q(100, 50, 300, 2);
		Q(220, 50, 300, 2);
		Q(250, 50, 300, 2);
		edct = 240;
		break;
	case 80:
		Q(40, 160, 0, 1);
		Q(100, 120, 0, 1);
		Q(160, 90, 0, 1);
		Q(220, 120, 0, 1);
		Q(280, 160, 0, 1);
		Q(40, 160, 150, 1);
		Q(100, 120, 150, 1);
		Q(160, 90, 150, 1);
		Q(220, 120, 150, 1);
		Q(280, 160, 150, 1);
		Q(70, 0, 0, 5);
		Q(130, 0, 0, 5);
		Q(190, 0, 0, 5);
		Q(250, 0, 0, 5);
		Q(70, 0, 150, 5);
		Q(130, 0, 150, 5);
		Q(190, 0, 150, 5);
		Q(250, 0, 150, 5);
		break;
	case 81:
		Q(100, -20, 30, 5);
		Q(160, -20, 60, 5);
		Q(300, -20, 90, 5);
		Q(20, -20, 120, 5);
		Q(200, -20, 150, 5);
		Q(160, -20, 180, 5);
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, -20, 300, 5)
		}
		break;
	case 82:
		for (e = 1; e < 10; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			Q(xp, 280 - e * 25, e * 5, 2)
		}
		edct = 240;
		break;
	case 83:
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 150, e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 50, 100 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 250, 170 + e * 5, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 150, 300 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 50, 400 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 250, 470 + e * 5, 2)
		}
		edct = 240;
		break;
	case 84:
		for (e = 1; e < 5; e++) {
			Q(310 - e * 60, 70, 0, 1);
			Q(10 + e * 60, 120, 0, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 60, 70, 400, 1);
			Q(10 + e * 60, 120, 400, 1)
		}
		Q(20, 0, 100, 5);
		Q(300, 0, 300, 5);
		Q(20, 0, 500, 5);
		Q(300, 0, 700, 5);
		break;
	case 85:
		Q(40, 0, 0, 5);
		Q(160, 0, 0, 5);
		Q(280, 0, 0, 5);
		for (e = 1; e < 35; e++) {
			Q(50, 50, 30 + e * 25, 3)
		}
		for (e = 1; e < 25; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			Q(xp, -25, e * 40, 1)
		}
		break;
	case 86:
		Q(130, 180, 0, 0);
		Q(160, 200, 0, 0);
		Q(190, 180, 0, 0);
		for (e = 1; e < 15; e++) {
			Q(120, 15, -50 + e * 70, 1);
			Q(200, 15, -50 + e * 70, 1)
		}
		Q(280, 30, 250, 2);
		Q(75, 150, 350, 2);
		Q(35, 70, 450, 2);
		Q(290, 300, 550, 2);
		Q(230, 95, 650, 2);
		Q(60, 340, 750, 2);
		Q(40, 240, 850, 2);
		Q(260, 200, 950, 2);
		edct = 240;
		break;
	case 87:
		for (e = 1; e < 4; e++) {
			Q(20 + e * 25, 60, 0 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(200 + e * 25, 90, 40 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(20 + e * 25, 120, 80 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(200 + e * 25, 150, 120 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(20 + e * 25, 180, 160 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(200 + e * 25, 210, 200 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(20 + e * 25, 240, 240 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(200 + e * 25, 270, 280 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(96 + e * 32, 60, 160 + e * 5, 1)
		}
		for (e = 1; e < 4; e++) {
			Q(96 + e * 32, 40, 180 + e * 5, 1)
		}
		edct = 240;
		break;
	case 88:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 100, e * 5, 2);
			Q( - 20 + e * 60, 140, 100 + e * 5, 2);
			Q( - 20 + e * 60, 180, 200 + e * 5, 2);
			Q( - 20 + e * 60, 220, 300 + e * 5, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 60, 10, 30 + e * 5, 1);
			Q(310 - e * 60, 50, 30 + e * 5, 1);
			Q(310 - e * 60, 10, 100 + e * 5, 1)
		}
		edct = 240;
		break;
	case 89:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 80 + e * 10, e * 5, 1);
			Q( - 20 + e * 60, 110 + e * 10, e * 5, 1);
			Q( - 20 + e * 60, 140 + e * 10, e * 5, 1)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 10 + e * 10, 120 + e * 5, 0);
			Q(340 - e * 60, 40 + e * 10, 120 + e * 5, 0);
			Q(340 - e * 60, 70 + e * 10, 120 + e * 5, 0)
		}
		break;
	case 90:
		for (e = 1; e < 6; e++) {
			Q( - 32 + e * 64, 190, e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 64, 30, 25 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 64, 60, 50 + e * 5, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 64, 110, 250 + e * 5, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(0 + e * 64, 180, 450 + e * 5, 1)
		}
		break;
	case 91:
		var n = 0;
		var r = 0;
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 200 + n, e * 10, 1);
			n += r;
			r -= 1.5
		}
		r = 0;
		for (e = 1; e < 9; e++) {
			Q(280 - e * 30, 196 + n, 90 + e * 10, 1);
			n += r;
			r -= 1.5
		}
		r = 0;
		for (e = 1; e < 9; e++) {
			Q(40 + e * 30, 192 + n, 180 + e * 10, 1);
			n += r;
			r -= 1.5
		}
		r = 0;
		for (e = 1; e < 9; e++) {
			Q(280 - e * 30, 188 + n, 270 + e * 10, 1);
			n += r;
			r -= 1.5
		}
		break;
	case 92:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 100, e * 5, 2);
			Q( - 20 + e * 60, 160, 100 + e * 5, 2);
			Q( - 20 + e * 60, 220, 200 + e * 5, 2);
			Q( - 20 + e * 60, 280, 300 + e * 5, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 60, 130, 400 + e * 5, 2);
			Q(310 - e * 60, 190, 500 + e * 5, 2);
			Q(310 - e * 60, 250, 600 + e * 5, 2)
		}
		edct = 240;
		break;
	case 93:
		for (e = 1; e < 4; e++) {
			Q(40, 0 + e * 50, 0, 3);
			Q(280, 0 + e * 50, 90, 4);
			Q(40, 0 + e * 50, 180, 3);
			Q(280, 0 + e * 50, 270, 4)
		}
		for (e = 1; e < 4; e++) {
			Q(100 + e * 30, -20, 45, 5);
			Q(100 + e * 30, -20, 135, 5);
			Q(100 + e * 30, -20, 225, 5);
			Q(100 + e * 30, -20, 315, 5)
		}
		break;
	case 94:
		for (e = 1; e < 10; e++) {
			Q(160, 40, -50 + e * 50, 3);
			Q(160, 40, -25 + e * 50, 4)
		}
		for (e = 1; e < 8; e++) {
			Q(40 + e * 30, 80, 0, 0)
		}
		Q(30, -20, 0, 5);
		Q(290, -20, 0, 5);
		Q(30, -20, 200, 5);
		Q(290, -20, 200, 5);
		Q(30, -20, 400, 5);
		Q(290, -20, 400, 5);
		Q(30, -20, 600, 5);
		Q(290, -20, 600, 5);
		break;
	case 95:
		for (e = 1; e < 15; e++) {
			Q(120, 40, e * 50, 1);
			Q(200, 40, e * 50, 1)
		}
		for (e = 1; e < 4; e++) {
			Q(0 + e * 30, 40, 100 + e * 50, 0);
			Q(320 - e * 30, 40, 100 + e * 50, 0);
			Q(0 + e * 30, 40, 300 + e * 50, 0);
			Q(320 - e * 30, 40, 300 + e * 50, 0)
		}
		for (e = 1; e < 6; e++) {
			Q(160, -20, 100 + e * 100, 5)
		}
		break;
	case 96:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 150, e * 5, 2);
			Q( - 20 + e * 60, 120, 150 + e * 5, 2);
			Q( - 20 + e * 60, 90, 300 + e * 5, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, -20, 0, 5);
			Q(10 + e * 60, -20, 150, 5);
			Q(10 + e * 60, -20, 300, 5)
		}
		edct = 240;
		break;
	case 97:
		for (e = 1; e < 11; e++) {
			Q(160, 20 + e * 25, 30 + e * 85, 2)
		}
		Q(160, 30, 0, 6);
		for (e = 1; e < 11; e++) {
			Q(100, 20 + e * 25, 60 + e * 85, 2)
		}
		Q(100, 30, 30, 0);
		for (e = 1; e < 11; e++) {
			Q(220, 20 + e * 25, 60 + e * 85, 2)
		}
		Q(220, 30, 30, 0);
		edct = 240;
		break;
	case 98:
		for (e = 1; e < 6; e++) {
			Q(220, 40, 30 + e * 25, 3);
			Q(100, 40, 195 + e * 25, 3)
		}
		Q(160, -20, 0, 6);
		Q(40, -20, 50, 5);
		Q(280, -20, 100, 5);
		Q(40, -20, 150, 5);
		Q(280, -20, 200, 5);
		Q(40, -20, 250, 5);
		Q(280, -20, 300, 5);
		break;
	case 99:
		Q(40, 100, 0, 0);
		Q(70, 100, 0, 1);
		Q(100, 100, 0, 5);
		Q(70, 70, 50, 0);
		Q(100, 70, 50, 1);
		Q(130, 70, 50, 5);
		Q(100, 40, 100, 0);
		Q(130, 40, 100, 1);
		Q(160, 40, 100, 5);
		Q(130, 10, 150, 0);
		Q(160, 10, 150, 1);
		Q(190, 10, 150, 5);
		Q(160, -20, 200, 0);
		Q(190, -20, 200, 1);
		Q(210, -20, 200, 5);
		Q(190, -50, 250, 0);
		Q(210, -50, 250, 1);
		Q(240, -50, 250, 5);
		Q(210, -80, 300, 0);
		Q(240, -80, 300, 1);
		Q(270, -80, 300, 5);
		break;
	case 100:
		for (e = 1; e < 9; e++) {
			Q(0 + e * 35, -60, e * 30, 9)
		}
		break;
	case 101:
		for (e = 1; e < 5; e++) {
			Q(60 + e * 40, -60, e * 15, 9)
		}
		break;
	case 102:
		Q(35, -60, 0, 5);
		Q(285, -60, 50, 5);
		Q(35, -60, 100, 5);
		Q(285, -60, 150, 5);
		for (e = 1; e < 3; e++) {
			Q(30 + e * 40, 50, 50, 1);
			Q(170 + e * 40, 50, 50, 1);
			Q(30 + e * 40, 50, 100, 1);
			Q(170 + e * 40, 50, 100, 1);
			Q(30 + e * 40, 50, 150, 1);
			Q(170 + e * 40, 50, 150, 1);
			Q(30 + e * 40, 50, 200, 1);
			Q(170 + e * 40, 50, 200, 1)
		}
		Q(160, 80, 300, 8);
		break;
	case 103:
		Q(160, 80, 50, 8);
		for (e = 1; e < 5; e++) {
			Q(120, 30 + e * 35, 0 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(200, 30 + e * 35, 0 + e * 5, 0)
		}
		break;
	case 104:
		Q(160, 80, 0, 6);
		Q(35, -60, 100, 9);
		Q(285, -60, 150, 9);
		Q(35, -60, 200, 9);
		Q(285, -60, 250, 9);
		Q(35, -60, 300, 9);
		Q(285, -60, 350, 9);
		break;
	case 105:
		for (e = 1; e < 9; e++) {
			Q(10 + e * 30, -10 + e * 30, 0, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 30, -10 + e * 30, 0, 0)
		}
		for (e = 1; e < 4; e++) {
			Q(160 - e * 30, 140 + e * 30, 0, 0)
		}
		break;
	case 106:
		for (e = 1; e < 5; e++) {
			Q(190 - e * 30, -10 + e * 30, 0, 0);
			Q(280 - e * 30, 80 + e * 30, 0, 0)
		}
		for (e = 1; e < 6; e++) {
			Q(70 + e * 30, 110, 0, 0)
		}
		Q(190, 50, 0, 0);
		Q(220, 80, 0, 0);
		Q(100, 140, 0, 0);
		Q(130, 170, 0, 0);
		break;
	case 107:
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, -40, -30 + e * 30, 5);
			Q( - 20 + e * 60, -40, 150 + e * 30, 5)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 40, 0, 1);
			Q(10 + e * 60, 40, 130, 1)
		}
		break;
	case 108:
		for (e = 1; e < 4; e++) {
			Q(180 - e * 40, -40, -100 + e * 100, 9);
			Q(140 + e * 40, -40, -100 + e * 100, 9)
		}
		break;
	case 109:
		for (e = 1; e < 24; e++) {
			Q(160, -40, -30 + e * 30, 5)
		}
		Q(100, 50, 0, 6);
		Q(220, 50, 0, 6);
		break;
	case 110:
		for (e = 1; e < 40; e++) {
			xp = (Math.floor(Math.random() * 15) + 1) * 20;
			Q(xp, 80, e * 40, 0)
		}
		break;
	case 111:
		for (e = 1; e < 4; e++) {
			Q(40 + e * 60, 160, 0, 0);
			Q(40 + e * 60, 40, 0, 0)
		}
		Q(100, 100, 0, 0);
		Q(220, 100, 0, 0);
		Q(160, 100, 15, 6);
		break;
	case 112:
		Q(145, 100, 0, 0);
		Q(175, 100, 0, 0);
		Q(85, 70, 15, 1);
		Q(115, 70, 15, 1);
		Q(205, 70, 15, 1);
		Q(235, 70, 15, 1);
		Q(25, -20, 50, 5);
		Q(55, -20, 50, 5);
		Q(265, -20, 50, 5);
		Q(295, -20, 50, 5);
		Q(145, 100, 200, 0);
		Q(175, 100, 200, 0);
		Q(85, 70, 215, 1);
		Q(115, 70, 215, 1);
		Q(205, 70, 215, 1);
		Q(235, 70, 215, 1);
		Q(25, -20, 250, 5);
		Q(55, -20, 250, 5);
		Q(265, -20, 250, 5);
		Q(295, -20, 250, 5);
		Q(145, 100, 400, 0);
		Q(175, 100, 400, 0);
		Q(85, 70, 415, 1);
		Q(115, 70, 415, 1);
		Q(205, 70, 415, 1);
		Q(235, 70, 415, 1);
		Q(25, -20, 450, 5);
		Q(55, -20, 450, 5);
		Q(265, -20, 450, 5);
		Q(295, -20, 450, 5);
		break;
	case 113:
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, -50 + e * 10, 0, 5);
			Q(310 - e * 30, -50 + e * 10, 0, 5)
		}
		Q(160, 0, 0, 5);
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, 30 + e * 10, 80, 2);
			Q(310 - e * 30, 30 + e * 10, 80, 2)
		}
		Q(160, 80, 80, 2);
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, 100 + e * 10, 130, 0);
			Q(310 - e * 30, 100 + e * 10, 130, 0)
		}
		Q(160, 150, 130, 0);
		for (e = 1; e < 5; e++) {
			Q(10 + e * 30, 170 + e * 10, 180, 1);
			Q(310 - e * 30, 170 + e * 10, 180, 1)
		}
		Q(160, 220, 180, 1);
		edct = 240;
		break;
	case 114:
		for (e = 1; e < 6; e++) {
			Q(70 + e * 30, 220, e * 5, 2)
		}
		for (e = 1; e < 7; e++) {
			Q(220, 220 - e * 28, 25 + e * 5, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(220 - e * 30, 52, 55 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(100, 52 + e * 28, 75 + e * 5, 2)
		}
		edct = 240;
		break;
	case 115:
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 200, e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 200, 30 + e * 5, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 130, 60 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 130, 90 + e * 5, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 60, 120 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 60, 150 + e * 5, 1)
		}
		edct = 240;
		break;
	case 116:
		for (e = 1; e < 10; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			Q(xp, 280 - e * 25, e * 5, 2)
		}
		for (e = 1; e < 13; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			Q(xp, 330 - e * 25, 470 + e * 5, 2)
		}
		for (e = 1; e < 13; e++) {
			xp = (Math.floor(Math.random() * 6) + 1) * 40;
			Q(xp, 330 - e * 25, 940 + e * 5, 2)
		}
		for (e = 1; e < 13; e++) {
			Q(50, 50, 940 + e * 25, 3)
		}
		edct = 240;
		break;
	case 117:
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 200, e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 200, 30 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 130, 60 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 130, 90 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 60, 120 + e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 60, 150 + e * 5, 0)
		}
		edct = 240;
		break;
	case 118:
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 200, e * 5, 2)
		}
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 200, 380 + e * 5, 2)
		}
		for (e = 1; e < 10; e++) {
			Q(310 - e * 30, 250, 360 + e * 5, 2)
		}
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 200, 740 + e * 5, 2)
		}
		for (e = 1; e < 10; e++) {
			Q(310 - e * 30, 250, 720 + e * 5, 2)
		}
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 300, 700 + e * 5, 2)
		}
		for (e = 1; e < 35; e++) {
			Q(280, 35, 30 + e * 25, 4)
		}
		edct = 240;
		break;
	case 119:
		Q(73, 110, 0, 2);
		Q(100, 125, 0, 2);
		Q(73, 140, 0, 2);
		Q(100, 155, 0, 2);
		Q(73, 170, 0, 2);
		Q(100, 185, 0, 2);
		Q(220, 170, 0, 2);
		Q(247, 185, 0, 2);
		Q(220, 200, 0, 2);
		Q(247, 215, 0, 2);
		Q(220, 230, 0, 2);
		Q(247, 245, 0, 2);
		for (e = 1; e < 4; e++) {
			Q(96 + e * 32, 110 + e * 15, 15 + e * 5, 0)
		}
		Q(45, 80, 0, 1);
		Q(275, 175, 0, 1);
		Q(45, 60, 120, 1);
		Q(275, 155, 120, 1);
		Q(45, 40, 240, 1);
		Q(275, 135, 240, 1);
		edct = 240;
		break;
	case 120:
		for (e = 1; e < 8; e++) {
			Q(188, 54 + e * 26, e * 5, 2)
		}
		for (e = 1; e < 6; e++) {
			Q(32 + e * 26, 132, e * 5, 2)
		}
		Q(160, 184, 45, 1);
		Q(132, 184, 45, 1);
		Q(132, 158, 45, 1);
		Q(104, 158, 45, 1);
		Q(216, 120, 65, 1);
		Q(244, 120, 65, 1);
		for (e = 1; e < 6; e++) {
			Q(278, 5 + e * 35, 100 + e * 5, 0)
		}
		edct = 240;
		break;
	case 121:
		Q(40, 250, 0, 0);
		for (e = 1; e < 8; e++) {
			Q(40 + e * 30, 250 - e * 10, e * 5, 1)
		}
		Q(280, 170, 40, 0);
		for (e = 1; e < 8; e++) {
			Q(280 - e * 30, 170 - e * 10, 40 + e * 5, 1)
		}
		Q(40, 90, 80, 0);
		for (e = 1; e < 8; e++) {
			Q(40 + e * 30, 90 - e * 10, 80 + e * 5, 1)
		}
		Q(280, 10, 120, 0);
		break;
	case 122:
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 200 - e * 10, e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 140 - e * 10, e * 5, 1)
		}
		for (e = 1; e < 6; e++) {
			Q( - 20 + e * 60, 130 - e * 10, 25 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(310 - e * 60, 80 - e * 10, 25 + e * 5, 1)
		}
		for (e = 1; e < 6; e++) {
			Q(340 - e * 60, 60 - e * 10, 50 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 20 - e * 10, 50 + e * 5, 1)
		}
		break;
	case 123:
		for (e = 1; e < 8; e++) {
			Q(160, 0 + e * 46, e * 5, 2)
		}
		for (e = 1; e < 5; e++) {
			Q(120, -40 + e * 60, 100 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(200, -10 + e * 60, 150 + e * 5, 0)
		}
		for (e = 1; e < 5; e++) {
			Q(80, -60 + e * 60, 300 + e * 5, 1)
		}
		for (e = 1; e < 5; e++) {
			Q(240, -30 + e * 60, 350 + e * 5, 1)
		}
		edct = 240;
		break;
	case 124:
		for (e = 1; e < 5; e++) {
			Q(150 - e * 30, -20 - e * 30, 0, 5);
			Q(170 + e * 30, -20 - e * 30, 400, 5)
		}
		for (e = 1; e < 4; e++) {
			Q(30 + e * 30, -140 - e * 30, 0, 5);
			Q(290 - e * 30, -140 - e * 30, 400, 5)
		}
		Q(160, 30, 0, 6);
		break;
	case 125:
		for (e = 1; e < 6; e++) {
			Q(70 + e * 30, 50, 0, 1);
			Q(70 + e * 30, 50, 50, 1);
			Q(70 + e * 30, 50, 100, 1);
			Q(70 + e * 30, 50, 150, 1);
			Q(70 + e * 30, 50, 200, 1);
			Q(70 + e * 30, 50, 250, 1)
		}
		for (e = 1; e < 3; e++) {
			Q(10 + e * 30, -60, e * 30, 9);
			Q(300 - e * 30, -60, 50 + e * 30, 9);
			Q(10 + e * 30, -60, 100 + e * 30, 9);
			Q(300 - e * 30, -60, 150 + e * 30, 9)
		}
		break;
	case 126:
		for (e = 1; e < 4; e++) {
			Q(70 + e * 30, 20 + e * 30, 0, 0);
			Q(70 + e * 30, 20 + e * 30, 100, 0);
			Q(70 + e * 30, 20 + e * 30, 200, 0);
			Q(70 + e * 30, 20 + e * 30, 300, 0)
		}
		for (e = 1; e < 3; e++) {
			Q(160 + e * 30, 110 - e * 30, 0, 0);
			Q(160 + e * 30, 110 - e * 30, 100, 0);
			Q(160 + e * 30, 110 - e * 30, 200, 0);
			Q(160 + e * 30, 110 - e * 30, 300, 0)
		}
		for (e = 1; e < 3; e++) {
			Q(10 + e * 30, -60, e * 30, 9);
			Q(310 - e * 30, -60, 75 + e * 30, 9);
			Q(10 + e * 30, -60, 150 + e * 30, 9);
			Q(310 - e * 30, -60, 225 + e * 30, 9)
		}
		break;
	case 127:
		for (e = 1; e < 5; e++) {
			Q(40 + e * 30, 20 + e * 30, 25, 1);
			Q(40 + e * 30, 20 + e * 30, 125, 1);
			Q(40 + e * 30, 20 + e * 30, 225, 0);
			Q(40 + e * 30, 20 + e * 30, 325, 0)
		}
		Q(40, -50, 150, 5);
		Q(40, -50, 350, 5);
		for (e = 1; e < 3; e++) {
			Q(310 - e * 30, -60, -30 + e * 30, 9);
			Q(310 - e * 30, -60, 200 + e * 30, 9);
			Q(310 - e * 30, -60, 300 + e * 30, 9)
		}
		break;
	case 128:
		Q(160, -50, 200, 5);
		for (e = 1; e < 3; e++) {
			Q(10 + e * 30, -60, e * 30, 9);
			Q(300 - e * 30, -60, 75 + e * 30, 9);
			Q(100 - e * 30, -60, 150 + e * 30, 9);
			Q(210 + e * 30, -60, 225 + e * 30, 9)
		}
		break;
	case 129:
		for (e = 1; e < 10; e++) {
			Q(10 + e * 30, 330, e * 5, 2)
		}
		for (e = 1; e < 11; e++) {
			Q(280, 330 - e * 28, 45 + e * 5, 2)
		}
		for (e = 1; e < 9; e++) {
			Q(280 - e * 30, 50, 95 + e * 5, 2)
		}
		for (e = 1; e < 10; e++) {
			Q(40, 50 + e * 28, 135 + e * 5, 2)
		}
		edct = 240;
		break;
	case 130:
		Q(40, -40, 120, 5);
		Q(280, -40, 200, 5);
		for (e = 1; e < 3; e++) {
			Q(70 + e * 30, -60, e * 30, 9);
			Q(240 - e * 30, -60, 75 + e * 30, 9);
			Q(70 + e * 30, -60, 150 + e * 30, 9);
			Q(240 - e * 30, -60, 225 + e * 30, 9);
			Q(70 + e * 30, -60, 320 + e * 30, 9);
			Q(240 - e * 30, -60, 370 + e * 30, 9)
		}
		break;
	case 131:
		for (e = 1; e < 5; e++) {
			Q(10 + e * 60, 70, 0 + e * 5, 2);
			Q(10 + e * 60, 70, 260 + e * 5, 2)
		}
		for (e = 1; e < 4; e++) {
			Q(40 + e * 60, -50, 0, 5);
			Q(40 + e * 60, -50, 260, 5)
		}
		Q(40, -50, 0, 9);
		Q(280, -50, 100, 9);
		Q(40, -50, 200, 9);
		Q(280, -50, 260, 9);
		Q(40, -50, 320, 9);
		Q(280, -50, 320, 9);
		edct = 240;
		break;
	case 132:
		for (e = 1; e < 4; e++) {
			Q(40 + e * 30, 70, 0, 1);
			Q(160 + e * 30, 70, 0, 1);
			Q(40 + e * 30, 70, 50, 1);
			Q(160 + e * 30, 70, 50, 1);
			Q(40 + e * 30, 70, 100, 0);
			Q(160 + e * 30, 70, 100, 0);
			Q(40 + e * 30, 70, 200, 0);
			Q(160 + e * 30, 70, 200, 0)
		}
		Q(160, 70, 300, 8);
		Q(40, -50, 0, 9);
		Q(280, -50, 100, 9);
		Q(40, -50, 200, 9);
		Q(280, -50, 260, 9);
		Q(160, -50, 0, 5);
		Q(160, -50, 100, 5);
		Q(160, -50, 200, 5);
		break;
	case 133:
		for (e = 1; e < 4; e++) {
			Q(180 - e * 40, -40, -70 + e * 70, 9);
			Q(140 + e * 40, -40, -70 + e * 70, 9)
		}
		Q(160, 60, 50, 8);
		Q(120, -40, 180, 5);
		Q(200, -40, 180, 5);
		break;
	default:
		break
	}
	ekey++;
	if (ekey > 100) {
		ekey = 0
	}
}
function gst() {
	window.requestAnimationFrame = function() {
		return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||
		function(e, t) {
			window.setTimeout(e, 1e3 / 60)
		}
	} ();
	ralp();
	setTimeout("fsem()", 50)
}
function rtalt() {
	if (window.orientation == 0) {
		if (navigator.userAgent.indexOf("Android") == -1 || window.innerHeight < 425 && window.devicePixelRatio < 2) {
			setTimeout(scrollTo, 100, 0, 1)
		}
	} else {}
}
function asd() {
	var e = 1 / window.devicePixelRatio;
	var t = document.createElement("meta");
	var n = Math.floor(screen.width / 3.2) / 100;
	e *= n;
	t.setAttribute("name", "viewport");
	t.setAttribute("content", "width = device-width, initial-scale = " + e + ", minimum-scale = " + e + ", maximum-scale = " + e);
	document.getElementsByTagName("head")[0].appendChild(t)
}
function vptg() {
	var e = navigator.userAgent;
	if (e.indexOf("Android") > -1) {
		dvid = 1;
		if (Math.floor(navigator.userAgent.substr(e.indexOf("Android") + 8, 1)) >= 4) {
			dvid = 2
		}
	}
	if (e.indexOf("iPad") > -1) {
		dvid = 3
	}
	if (e.indexOf("iPhone") > -1) {
		dvid = 4;
		if (window.devicePixelRatio >= 2) {
			dvid = 5;
			if (window.screen.height == 568) {
				dvid = 5
			}
		}
	}
	if (navigator.userAgent.indexOf("GT-I9100") == -1) {
		switch (dvid) {
		case 1:
			var t = 1 / window.devicePixelRatio;
			var n = document.createElement("meta");
			n.setAttribute("name", "viewport");
			n.setAttribute("content", "width = device-width, initial-scale = " + t + ", minimum-scale = " + t + ", maximum-scale = " + t);
			document.getElementsByTagName("head")[0].appendChild(n);
			setTimeout("asd()", 50);
			break;
		case 2:
			var t = 1 / window.devicePixelRatio;
			var n = document.createElement("meta");
			n.setAttribute("name", "viewport");
			n.setAttribute("content", "width = device-width, initial-scale = " + t + ", minimum-scale = " + t + ", maximum-scale = " + t);
			document.getElementsByTagName("head")[0].appendChild(n);
			var r = Math.floor(screen.width / 3.2) / 100;
			document.body.style.webkitTransformOrigin = "0 0 0";
			document.body.style.webkitTransform = "scale3d(" + r + "," + r + ",1)";
			wdpr = r;
			break;
		case 3:
			var t = 2;
			var n = document.createElement("meta");
			n.setAttribute("name", "viewport");
			n.setAttribute("content", "width = device-width, initial-scale = " + t + ", minimum-scale = " + t + ", maximum-scale = " + t);
			document.getElementsByTagName("head")[0].appendChild(n);
			break;
		case 4:
			gc = 0;
			break;
		case 5:
			gc = 1;
			var t = .5;
			var n = document.createElement("meta");
			n.setAttribute("name", "viewport");
			n.setAttribute("content", "width = device-width, initial-scale = " + t + ", minimum-scale = " + t + ", maximum-scale = " + t);
			document.getElementsByTagName("head")[0].appendChild(n);
			var r = 2;
			chf2.style.webkitTransformOrigin = "0 0 0";
			chf2.style.webkitTransform = "scale3d(" + r + "," + r + ",1)";
			chf2.style.transformOrigin = "0 0 0";
			chf2.style.transform = "scale3d(" + r + "," + r + ",1)";
			wdpr = r;
			gc = 1;
			break;
		case 6:
			gc = 1;
			break;
		default:
			break
		}
	}
}
function ralp2() {
	lps += .75;
	if (lps > 1) {
		lps--;
		lp()
	}
}
function ralp() {
	ralp2();
	if (gmovc != 999) {
		window.requestAnimationFrame(ralp)
	} else {
		chf2.style.webkitTransform = "scale3d(" + cwdpr + "," + cwdpr + ",1) translate3d(0px, 0px, 0px)";
		updateShareScore(scr);
		gs = 4
	}
}
function lcir(e, t) {
	var n = 0;
	var r = 0;
	var i = 0;
	for (n = 0; n < 12; n++) {
		r = ldri + n;
		if (r > 12) {
			r -= 12
		}
		ctx.beginPath();
		ctx.lineWidth = 2;
		ctx.strokeStyle = "#FFFFFF";
		ctx.globalAlpha = r / 10;
		ctx.moveTo(e + Math.cos(i) * 8, t + Math.sin(i) * 8);
		ctx.lineTo(e + Math.cos(i) * 15, t + Math.sin(i) * 15);
		ctx.stroke();
		i += 4.18 / 8
	}
	ctx.globalAlpha = 1;
	ldri--;
	if (ldri < 1) {
		ldri = 12
	}
}
function lding() {
	ctx.clearRect(0, 0, 320, 416);
	lcir(160, 190)
}
function gsts() {
	gldt++;
	if (gldt > 3 && gs == 9) {
		ctx.clearRect(0, 0, 320, 416);
		ctx.drawImage(img4, 0, 0, 320, 301, 0, 115, 320, 301);
		clearInterval(ldlp);
		gs = 2
	}
}
function gsts2() {
	gldt2++;
	if (gldt2 > 1) {
		ctx.drawImage(img3, 0, 0, 320, 367, 0, 50, 320, 367);
		clearInterval(ldlp);
		gs = 1
	}
}
function gsts3() {
	ctx.fillStyle = "#000";
	ctx.fillRect(99, 353, 122, 55);
	lcir(160, 382)
}
function ist() {
	wdpr = 1;
	cwdpr = 1;
	chf2.innerHTML = '<canvas id="gcvs" width="320" height="416"></canvas>';
	if (navigator.userAgent.indexOf("Android") > -1) {
		setTimeout('document.body.style.overflow="hidden"', 1e3);
		if (navigator.userAgent.indexOf("Android") == -1 || window.innerHeight < 425 && window.devicePixelRatio < 2) {
			setTimeout(scrollTo, 100, 0, 1)
		}
	} else {
		setTimeout(scrollTo, 100, 0, 1)
	}
	canvas = document.getElementById("gcvs");
	if (!canvas || !canvas.getContext) {
		return false
	}
	gldt = 0;
	gldt2 = 0;
	ctx = canvas.getContext("2d");
	img3 = new Image;
	if (document.URL.indexOf("page") == -1) {
		img3.src = "ds/title.jpg"
	} else {
		img3.src = "ds/title_s.jpg"
	}
	img3.onload = function() {
		gsts2()
	};
	img4 = new Image;
	img4.src = "ds/manual.jpg";
	img4.onload = function() {
		gsts2()
	};
	img5 = new Image;
	if (document.URL.indexOf("page") == -1) {
		img5.src = "ds/gameover.gif"
	} else {
		img5.src = "ds/gameover_s.gif"
	}
	img5.onload = function() {
		gsts()
	};
	img6 = new Image;
	img6.src = "ds/background.jpg";
	img6.onload = function() {
		gsts()
	};
	img = new Image;
	img.src = "ds/char_sheet.gif";
	img.onload = function() {
		gsts()
	};
	img2 = new Image;
	img2.src = "ds/effect.png";
	img2.onload = function() {
		gsts()
	};
	ldri = 0;
	ldlp = setInterval("lding();", 1e3 / 20);
	txs = 0;
	tm = 0;
	mt = 0;
	flt = 0;
	w = {};
	mi = 120;
	em = 20;
	t = 0;
	di = 0;
	ti = 0;
	dx = new Array;
	dy = new Array;
	lx = new Array;
	ly = new Array;
	sx = new Array;
	sy = new Array;
	sc = new Array;
	sl = new Array;
	wt = new Array;
	e1 = new Array;
	e2 = new Array;
	e3 = new Array;
	e4 = new Array;
	e1[0] = [43, 44, 45];
	e2[0] = [5, 6, 7, 8, 9, 10];
	e3[0] = [11, 12, 13, 14, 15, 16];
	e1[1] = [46, 47, 48];
	e2[1] = [17, 18, 19, 20, 21, 22];
	e3[1] = [23, 24, 25, 26, 27, 28];
	e1[2] = [49, 50, 51];
	e2[2] = [34, 35, 36];
	e3[2] = [37, 38, 39];
	e1[3] = [62, 63, 64];
	e2[3] = [52, 53, 54, 55, 56];
	e3[3] = [57, 58, 59, 60, 61];
	e1[4] = [62, 63, 64];
	e2[4] = [52, 53, 54, 55, 56];
	e3[4] = [57, 58, 59, 60, 61];
	e1[5] = [71, 72, 73];
	e2[5] = [65, 66, 67];
	e3[5] = [68, 69, 70];
	e1[6] = [86, 87, 88];
	e2[6] = [74, 75, 76, 77, 78, 79];
	e3[6] = [80, 81, 82, 83, 84, 85];
	e1[7] = [125, 126, 127];
	e2[7] = [128, 129, 130];
	e3[7] = [149, 150, 151];
	e1[8] = [139, 140, 141];
	e2[8] = [131, 132, 133, 134];
	e3[8] = [135, 136, 137, 138];
	e1[9] = [158, 159, 160];
	e2[9] = [155, 156, 157];
	e3[9] = [135, 136, 137];
	var e = 0;
	for (e = 0; e < 10; e++) {
		e4[e] = e2[e].length - 1
	}
	edct = 0;
	ei = 0;
	ix = new Array(0, 539, 562, 40, 47, 0, 31, 62, 93, 124, 155, 186, 217, 248, 279, 310, 341, 0, 27, 54, 81, 108, 135, 162, 189, 216, 243, 270, 297, 388, 462, 536, 610, 684, 0, 23, 46, 69, 92, 115, 536, 558, 580, 372, 403, 434, 324, 351, 378, 138, 161, 184, 0, 33, 66, 99, 132, 165, 198, 231, 264, 297, 330, 363, 396, 0, 27, 54, 81, 108, 135, 162, 189, 215, 0, 45, 90, 135, 180, 225, 270, 315, 360, 405, 450, 495, 540, 585, 630, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 60, 69, 78, 87, 96, 105, 114, 123, 132, 141, 40, 89, 138, 187, 236, 162, 185, 208, 231, 254, 277, 300, 323, 346, 369, 392, 429, 456, 483, 510, 537, 564, 0, 49, 98, 147, 196, 245, 294, 343, 392, 441, 490, 286, 296, 306, 316, 326, 336, 392, 591, 618, 645, 0, 35, 69, 103, 138, 172, 206, 241, 276, 346, 285, 292, 299, 306, 313, 320, 327, 334, 341, 348, 0, 84, 168, 252, 336, 420, 526, 632, 738, 844, 950, 1040, 502, 520, 538, 355, 405, 420, 435, 450, 465, 480, 495, 510, 525, 540);
	iy = new Array(0, 265, 265, 0, 0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0, 0, 120, 120, 120, 120, 120, 120, 51, 51, 51, 51, 51, 51, 90, 90, 90, 120, 120, 120, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 186, 186, 186, 186, 186, 186, 186, 186, 186, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 146, 146, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 70, 70, 70, 70, 70, 70, 18, 146, 146, 146, 313, 313, 313, 313, 313, 313, 313, 313, 313, 70, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 70, 70, 70, 36, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90);
	iw = new Array(0, 23, 23, 7, 6, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 74, 74, 74, 74, 74, 23, 23, 23, 23, 23, 23, 22, 22, 22, 31, 31, 31, 27, 27, 27, 23, 23, 23, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 27, 27, 27, 27, 27, 27, 27, 27, 27, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 49, 49, 49, 49, 49, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 262, 27, 27, 27, 27, 27, 27, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 10, 10, 10, 10, 10, 10, 262, 27, 27, 27, 35, 34, 34, 35, 34, 34, 35, 35, 35, 156, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 84, 84, 84, 84, 84, 106, 106, 106, 106, 106, 106, 31, 18, 18, 18, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15);
	ih = new Array(0, 43, 43, 7, 7, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 51, 51, 51, 51, 51, 26, 26, 26, 26, 26, 26, 17, 17, 17, 39, 39, 39, 30, 30, 30, 26, 26, 26, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 37, 37, 37, 37, 37, 37, 37, 37, 37, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 21, 21, 21, 21, 21, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 18, 33, 33, 33, 33, 33, 33, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 10, 10, 10, 10, 10, 10, 18, 33, 33, 33, 42, 42, 42, 42, 42, 42, 42, 42, 42, 18, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 31, 18, 18, 18, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26);
	schx = new Array(105, 113, 121, 129, 137);
	schx2 = new Array(137, 154, 171, 188, 205);
	hthx = new Array(155, 171, 187, 203, 218);
	fi = 0;
	ntx = 0;
	nty = 0;
	unty = 0;
	utx = 0;
	uty = 0;
	pl = 1;
	plc = 1;
	tstn = 0;
	cef = {};
	cefi = 0;
	cmb = 0;
	dcmb = 0;
	cmbf = 0;
	cmbc = 0;
	cmbv = 0;
	tmst = 0;
	shprs = 0;
	fhp = 0;
	dhp = fhp;
	thp = fhp;
	thp2 = fhp;
	thp3 = fhp;
	tmlst = 0;
	lzac = 0;
	bsdmg = 0;
	bsdmg2 = 0;
	bsdmi = 0;
	efx = -1;
	efy = -1;
	efs = -1;
	eft = 1;
	eff = {};
	effi = 0;
	scr = 0;
	hthp = 3;
	gmovc = 0;
	stlv = 1;
	for (e = 0; e < mi; e++) {
		sc[e] = -9999
	}
	gs = -1;
	document.addEventListener("touchstart", tev1, false);
	document.addEventListener("touchend", tev2, false);
	document.addEventListener("touchmove", tev3, false);
	document.addEventListener("mousedown", tev11, false);
	document.addEventListener("mouseup", tev22, false);
	document.addEventListener("mousemove", tev33, false);
	ettl = 0;
	ekey = 0;
	uekey = 0;
	askb = 0;
	var n = document.URL.substr(0, 19);
	var r = 0;
	var i = 0;
	for (r = 7; r < 19; r++) {
		i += n.charCodeAt(r)
	}
	askb = 1
}
function scs(e, t, n) {
	var r = "0000000000" + n;
	var r = r.substr( - 9, 9);
	for (scx = 1; scx <= t; scx++) {
		var i = Math.floor(r.substr(10 - scx - 1, 1)) + 1;
		switch (e) {
		case 1:
			spt2(161 + i, schx[5 - scx], 6);
			schx;
			break;
		case 2:
			spt2(187 + i, schx2[5 - scx], 250);
			schx;
			break;
		default:
			break
		}
	}
}
function Q(e, t, n, r) {
	w["e" + ei] = {
		x: e,
		y: t,
		sx: 0,
		sy: 0,
		t: 0,
		p: 0,
		f: 0,
		hp: 0,
		mp: 0,
		aw: 0,
		ah: 0,
		ff: 0,
		fs: 0,
		wt: n
	};
	var i = w["e" + ei];
	i.t = r;
	switch (i.t) {
	case 0:
		i.mp = 15;
		i.fs = .2;
		i.sx = 0;
		i.sy = .1;
		break;
	case 1:
		i.mp = 2;
		i.fs = .2;
		i.sx = 0;
		i.sy = .2;
		break;
	case 2:
		i.mp = 3;
		i.fs = .025;
		i.sx = 0;
		i.sy = 0;
		break;
	case 3:
		i.mp = 3;
		i.fs = .3;
		i.sx = 1.5;
		i.sy = .1;
		break;
	case 4:
		i.mp = 3;
		i.fs = .3;
		i.sx = -1.5;
		i.sy = .1;
		break;
	case 5:
		i.mp = 6;
		i.fs = .4;
		i.sx = 0;
		i.sy = .5;
		break;
	case 6:
		i.mp = 90;
		i.fs = .2;
		i.sx = 0;
		i.sy = .1;
		break;
	case 8:
		i.mp = 90;
		i.fs = .4;
		i.sx = 0;
		i.sy = .5;
		break;
	case 9:
		i.mp = 1;
		i.fs = 0;
		i.sx = 0;
		i.sy = 1.25;
		break;
	default:
	}
	i.sy *= 3;
	if (stlv > 70) {
		i.sy *= 1 + (stlv - 70) * .033
	}
	i.p = e1[i.t][0];
	i.f = 0;
	i.aw = iw[e1[i.t][0]] / 2 + 8;
	i.ah = ih[e1[i.t][0]] / 2 + 8;
	i.x = e - i.aw + 8;
	i.y = t - i.ah + 8;
	i.hp = 999;
	ei++;
	ettl++
}
function spt(e, t, n) {
	var r = ix[e];
	var i = iy[e];
	var s = iw[e];
	var o = ih[e];
	ctx.drawImage(img, r, i, s, o, t | 0, n | 0, s, o)
}
function sptp(e, t, n) {
	var r = (e - 29) * 80;
	var i = 0;
	var s = 80;
	var o = 70;
	ctx.drawImage(img2, r, i, s, o, t | 0, n | 0, s, o)
}
function sptp2(e, t, n) {
	var r = ix[e];
	var i = iy[e];
	var s = iw[e];
	var o = ih[e];
	ctx.drawImage(img2, r, i, s, o, t | 0, n | 0, s, o)
}
function sptp3(e, t, n) {
	var r = e * 22;
	var i = 70;
	var s = 22;
	var o = 17;
	ctx.drawImage(img2, r, i, s, o, t | 0, n | 0, 22, 17)
}
function spt_tama(e, t, n) {
	var r = e * 22;
	var i = 70;
	var s = 22;
	var o = 17;
	ctx.drawImage(img2, r, i, s, o, t | 0, n | 0, s, o)
}
function spt2(e, t, n) {
	var r = ix[e];
	var i = iy[e];
	var s = iw[e];
	var o = ih[e];
	ctx.drawImage(img, r, i, s, o, t, n, s, o)
}
function cnset() {
	if (tmst == 0 && cmb > 2) {
		var e = 0;
		var t = 34;
		var n = thp2 * 1.05 / (cmb * 3);
		for (e = 0; e < cmb * 3; e++) {
			cef["c" + cefi] = {
				x: 160,
				y: 375,
				sx: t | 0,
				sy: -Math.random() * 2 - 2,
				t: Math.floor(Math.random() * 2),
				f: Math.floor(Math.random() * 5),
				fs: Math.random() * 1
			};
			cefi++;
			t += n
		}
		scr += Math.floor(cmb * cmb * .5) + 1
	}
}
function efset() {
	var e = 0;
	var t = 34;
	effi = 0;
	for (e = 0; e < 20; e++) {
		eff["c" + effi] = {
			x: 135,
			y: 5,
			sx: t | 0,
			sy: -Math.random() * 2,
			f: Math.floor(Math.random() * 3),
			fs: 10 + Math.floor(Math.random() * 60),
			a: 1
		};
		effi++;
		t += 12
	}
}
function alc(e) {
	if (e < 0) {
		e = 0
	}
	return e
}
function drg(e, t) {
	ntx = e;
	nty = t;
	if (dvid < 3 && unty > 350 && t < 60) {
		ntx = e * wdpr;
		nty = unty
	}
	if (nty > 370) {
		nty = 370
	}
	unty = nty
}
function GTX(e) {
	e /= wdpr;
	return e
}
function GTY(e) {
	e /= wdpr;
	return e
}
function cht(e, t) {
	if (tmst < 1) {
		ntx = e;
		nty = t;
		utx = ntx;
		uty = nty
	}
}
function gbmx() {
	if (fhp >= 271) {
		dhp = 0;
		fhp = 0;
		thp = 0;
		thp2 = 0;
		thp3 = 0;
		efx = 270;
		efy = 370;
		efs = -3
	}
}
function setd(e, t) {
	ti++;
	if (ti > 0) {
		ti = 0;
		var n = di;
		var r = 0;
		var i;
		var s;
		var o;
		var u;
		var a;
		while (r < mi) {
			if (sc[n] == -9999) {
				dx[n] = 164;
				dy[n] = 366;
				lx[n] = Math.round(e);
				ly[n] = Math.round(t);
				i = lx[n] - dx[n];
				s = ly[n] - dy[n];
				o = Math.atan2(s, i);
				u = Math.sqrt(Math.pow(i, 2) + Math.pow(s, 2));
				a = 40;
				sx[n] = Math.cos(o) * a;
				sy[n] = Math.sin(o) * a;
				sl[n] = Math.floor(u / a);
				sc[n] = -9998;
				wt[n] = fi;
				fi++;
				r = 999;
				di = n + 1;
				if (di > mi) {
					di = 0
				}
				tmst++
			}
			n++;
			if (n > mi) {
				n = 0
			}
			r++
		}
	}
	sc[0] = -9999
}
function fst() {
	if (tmst < 10) {
		for (var e = 1; e < 10; e++) {
			setd(ntx, nty)
		}
	}
	tmlst = tmst;
	fi = 0;
	tstn = 0;
	for (var e = 1; e < mi; e++) {
		if (sc[e] == -9998) {
			sc[e] = -wt[e];
			tstn += 1
		}
	}
	if (tmst > 120) {
		tmst = 120
	}
	if (tmst > 0) {
		tmst--
	}
	lzac = 0
}
function vptg2() {
	switch (dvid) {
	case 3:
		var e = 1;
		var t = document.createElement("meta");
		t.setAttribute("name", "viewport");
		t.setAttribute("content", "width = device-width, initial-scale = " + e + ", minimum-scale = " + e + ", maximum-scale = " + e);
		document.getElementsByTagName("head")[0].appendChild(t);
		var n = 2;
		chf2.style.webkitTransformOrigin = "0 0 0";
		chf2.style.webkitTransform = "scale3d(" + n + "," + n + ",1)";
		wdpr = n;
		cwdpr = n;
		break;
	case 5:
		var e = .5;
		var t = document.createElement("meta");
		t.setAttribute("name", "viewport");
		t.setAttribute("content", "width = device-width, initial-scale = " + e + ", minimum-scale = " + e + ", maximum-scale = " + e);
		document.getElementsByTagName("head")[0].appendChild(t);
		var n = 2;
		chf2.style.webkitTransformOrigin = "0 0 0";
		chf2.style.webkitTransform = "scale3d(" + n + "," + n + ",1)";
		wdpr = n;
		cwdpr = n;
		break;
	default:
		break
	}
}
function vptg3() {
	switch (dvid) {
	case 3:
		var e = 2;
		var t = document.createElement("meta");
		t.setAttribute("name", "viewport");
		t.setAttribute("content", "width = device-width, initial-scale = " + e + ", minimum-scale = " + e + ", maximum-scale = " + e);
		document.getElementsByTagName("head")[0].appendChild(t);
		var n = 1;
		chf2.style.webkitTransformOrigin = "0 0 0";
		chf2.style.webkitTransform = "scale3d(" + n + "," + n + ",1)";
		wdpr = n;
		cwdpr = n;
		break;
	case 5:
		var e = 1;
		var t = document.createElement("meta");
		t.setAttribute("name", "viewport");
		t.setAttribute("content", "width = device-width, initial-scale = " + e + ", minimum-scale = " + e + ", maximum-scale = " + e);
		document.getElementsByTagName("head")[0].appendChild(t);
		var n = 1;
		chf2.style.webkitTransformOrigin = "0 0 0";
		chf2.style.webkitTransform = "scale3d(" + n + "," + n + ",1)";
		wdpr = n;
		cwdpr = n;
		break;
	default:
		break
	}
}
function tev11(e) {
	var t = e.layerX;
	var n = e.layerY;
	mousePos = {
		x: t,
		y: n
	};
	Press(mousePos);
	e.preventDefault()
}
function tev1(e) {
	var t = e.touches[0].pageX;
	var n = e.touches[0].pageY;
	mousePos = {
		x: t,
		y: n
	};
	Press(mousePos)
}
function Press(e) {
	var n = GTX(e.x);
	var r = GTY(e.y);
	switch (gs) {
	case 1:
		if (n > 60 && r > 250 && n < 275 && r < 370) {
			ctx.clearRect(0, 0, 320, 416);
			ctx.drawImage(img4, 0, 0, 320, 301, 0, 115, 320, 301);
			if (gldt > 3) {
				gs = 2
			} else {
				ldri = 0;
				ldlp = setInterval("gsts3();", 1e3 / 20);
				ctx.fillStyle = "#000";
				ctx.fillRect(99, 353, 122, 55);
				gs = 9
			}
		} else if (n > 175 && r > 375) {
			goHome()
		} else if (n < 60 && r > 350) {
			setTimeout(function() {
				show_share()
			},
			500)
		}
		break;
	case 2:
		if (n > 60 && r > 310 && n < 280) {
			setTimeout("gs=3;gst();", 50)
		}
		break;
	case 3:
		if (tmst < 1) {
			tmst = 0;
			t = 1;
			cht(n, r)
		}
		break;
	case 4:
		if (n > 175 && r > 375) {
			goHome()
		} else if (n > 35 && r > 305 && n < 155 && r < 350) {
			ettl = 0;
			gs = 3;
			scr = 0;
			hthp = 3;
			gmovc = 0;
			stlv = 0;
			w = {};
			cef = {};
			eff = {};
			gst()
		} else if (n > 168 && r > 305 && n < 286 && r < 350) {
			setTimeout(function() {
				show_share()
			},
			500)
		}
		break;
	default:
		break
	}
}
function tev22(e) {
	var t = e.layerX;
	var n = e.layerY;
	mousePos = {
		x: t,
		y: n
	};
	Release(mousePos)
}
function tev2(e) {
	var t = e.changedTouches[0].pageX;
	var n = e.changedTouches[0].pageY;
	mousePos = {
		x: t,
		y: n
	};
	Release(mousePos)
}
function Release(e) {
	if (gs == 3) {
		if (t == 1) {
			fst()
		}
		t = 2
	}
	switch (dvid) {
	case 4:
		if (window.innerHeight < 416) {
			setTimeout(scrollTo, 100, 0, 1)
		}
		break;
	case 5:
		if (window.innerHeight != 834) {
			setTimeout(scrollTo, 100, 0, 1)
		}
		break;
	default:
		break
	}
	unty = 0
}
function tev33(e) {
	var t = e.layerX;
	var n = e.layerY;
	mousePos = {
		x: t,
		y: n
	};
	Move(mousePos)
}
function tev3(e) {
	var t = e.touches[0].pageX;
	var n = e.touches[0].pageY;
	mousePos = {
		x: t,
		y: n
	};
	Move(mousePos)
}
function Move(e) {
	if (gs == 3 && t == 1) {
		drg(GTX(e.x), GTY(e.y))
	}
}
function tt(e) {}
function lp() {
	ctx.drawImage(img6, 0, 0, 320, 416, 0, 0, 320, 416);
	tm = Math.floor( + (new Date) / 1e3);
	if (tm != mt && tm > 3) {
		txs = flt;
		flt = 0
	}
	flt++;
	mt = tm;
	var e;
	var n;
	var r;
	var i;
	var s;
	var o;
	e = ntx - utx;
	n = nty - uty;
	s = Math.sqrt(Math.pow(e, 2) + Math.pow(n, 2));
	if (s > 0 && t == 1) {
		r = Math.atan2(n, e);
		for (o = 0; o < s; o += 6) {
			setd(utx + Math.cos(r) * o, uty + Math.sin(r) * o)
		}
		utx = ntx;
		uty = nty
	}
	ctx.fillStyle = "#7c5a37";
	for (o = 0; o < mi; o++) {
		if (sc[o] > -9999) {
			if (sc[o] < 1e4) {
				ctx.fillRect(lx[o] - 2, ly[o] - 2, 6, 6)
			}
			if (sc[o] > -9998) {
				sc[o]++
			}
		}
	}
	ctx.globalAlpha = 1;
	var u = new Array;
	var a = 0;
	var f;
	var l = 0;
	for (o in w) {
		f = w[o];
		if (f.hp > -1) {
			u.push([o, f.y + ih[f.p]])
		}
	}
	srt(u, 1);
	var c = 0;
	var h = 0;
	for (o = 0; o < u.length; o++) {
		c++;
		f = w[u[o][0]];
		switch (f.hp) {
		case 0:
			sptp(f.p, f.x, f.y);
			f.f += .3;
			f.p = f.f | 0;
			if (f.p > 41) {
				f.hp = -999;
				f.y = 999;
				delete f;
				ettl--;
				if (ettl == 0) {
					stlv += hthp;
					setTimeout("fsem()", 10)
				}
			}
			break;
		case 998:
			spt(f.p, f.x, f.y);
			f.f += .2;
			f.ff = f.f | 0;
			f.p = e1[f.t][f.ff];
			if (f.f > 3) {
				f.p = e2[f.t][0];
				f.hp = f.mp
			}
			if (f.t == 2) {
				f.wt = edct
			}
			break;
		case 999:
			f.wt--;
			if (f.wt < 1) {
				f.hp = 998;
				f.wt = 0
			}
			break;
		default:
			switch (f.t) {
			case 2:
				spt(f.p, f.x, f.y);
				f.f += f.fs;
				if (f.f > e4[f.t]) {
					f.f = 0
				}
				f.ff = f.f | 0;
				f.p = e2[f.t][f.ff];
				if (f.wt > 0) {
					f.wt--;
					if (f.wt == 0) {
						f.t = 7;
						f.sy = 2;
						f.x -= 2;
						f.y -= 5;
						f.p = e1[f.t][0];
						f.fs = .4;
						f.f = 0;
						f.ff = 0;
						f.aw = iw[e1[f.t][0]] / 2 + 8;
						f.ah = ih[e1[f.t][0]] / 2 + 8;
						f.hp = 998
					}
				}
				break;
			case 3:
			case 4:
				f.x += f.sx;
				f.y += f.sy;
				spt(f.p, f.x, f.y);
				f.f += f.fs;
				if (f.f > e2[f.t].length) {
					f.f = 0
				}
				f.ff = f.f | 0;
				f.p = e2[f.t][f.ff];
				if (f.x > 282) {
					f.sx = -Math.abs(f.sx)
				}
				if (f.x < 5) {
					f.sx = Math.abs(f.sx)
				}
				break;
			case 8:
				if (f.wt == 0) {
					if (f.y < 80) {
						f.y -= 1.2
					}
				} else {
					f.y -= f.sy / 5
				};
			case 5:
			case 6:
				if (f.wt == 0) {
					f.x += f.sx;
					f.y += f.sy;
					spt(f.p, f.x, f.y);
					f.f += f.fs;
					if (f.f > e2[f.t].length) {
						f.f = 0
					}
					f.ff = f.f | 0;
					f.p = e2[f.t][f.ff];
					if (f.sx != 0) {
						if (f.x > 282) {
							f.sx = -Math.abs(f.sx)
						}
						if (f.x < 5) {
							f.sx = Math.abs(f.sx)
						}
					}
				} else {
					f.y += f.sy / 5;
					spt(f.p, f.x, f.y);
					f.f += .1;
					if (f.f > e2[f.t].length) {
						f.f = 0
					}
					f.ff = f.f | 0;
					f.p = e2[f.t][f.ff];
					f.wt--
				}
				break;
			case 9:
				f.p = 152;
				if (f.y > 200) {
					var p = 160 - f.x;
					f.x += p / 20;
					if (p > 0) {
						f.p = 154
					} else {
						f.p = 153
					}
				}
				f.y += f.sy;
				spt(f.p, f.x, f.y);
				break;
			default:
				f.x += f.sx;
				f.y += f.sy;
				spt(f.p, f.x, f.y);
				f.f += f.fs;
				if (f.f > e4[f.t]) {
					f.f = 0
				}
				f.ff = f.f | 0;
				f.p = e2[f.t][f.ff];
				break
			}
			if (f.y + ih[f.p] > 380) {
				f.hp = 0;
				f.sx = 0;
				f.sy = 0;
				if (f.t != 99) {
					f.x -= (iw[29] - iw[f.p]) / 2;
					f.y -= (ih[29] - ih[f.p]) / 2 + 6;
					f.p = 29;
					f.f = 29;
					f.t = 99
				}
				if (bsdmg2 == 0 && hthp > 0) {
					hthp--;
					if (hthp < 1) {
						hthp = 0;
						bsdmg = 20;
						bsdmg2 = 500;
						gs = 8
					}
				}
				if (hthp > 0) {
					bsdmg = 20;
					bsdmg2 = 50
				}
			}
			break
		}
	}
	var d = 0;
	var v = 0;
	var m = lzac;
	for (o = 0; o < mi; o++) {
		if (sc[o] > -1) {
			dx[o] += sx[o];
			dy[o] += sy[o];
			if (sc[o] == sl[o]) {
				dx[o] = lx[o];
				dy[o] = ly[o];
				sc[o] = 1e4;
				for (i2 in w) {
					f = w[i2];
					if (Math.abs(dx[o] - f.x - f.aw + 11) < f.aw && Math.abs(dy[o] - f.y - f.ah + 11) < f.ah && f.hp < 998 && askb == 1) {
						f.hp--;
						if (f.hp < 1) {
							f.hp = 0;
							f.sx = 0;
							f.sy = 0;
							if (f.t != 99) {
								f.x -= (iw[29] - iw[f.p]) / 2;
								f.y -= (ih[29] - ih[f.p]) / 2 + 6;
								f.p = 29;
								f.f = 29;
								f.t = 99;
								cmb++;
								scr++;
								dcmb = cmb;
								if (cmbc < 10) {
									cmbv = 1
								}
								if (cmb == 2) {
									cmbf = 0
								}
								if (cmb > 2) {
									thp3 = fhp + cmb * 8;
									if (thp3 >= 271) {
										thp3 = 271
									}
								}
							}
						} else {
							if (f.f > e4[f.t]) {
								f.f = e4[f.t]
							}
							f.ff = f.f | 0;
							f.p = e3[f.t][f.ff]
						}
						if (f.t == 5 || f.t == 6 || f.t == 8) {
							f.wt = 30
						}
					}
				}
				tmst--;
				if (tmst == 0) {
					gbmx();
					if (cmb > 2) {
						cnset();
						thp = fhp + cmb * 8;
						if (thp >= 271) {
							thp = 271
						}
					} else if (cmbc > 0) {
						cmbv = -1
					}
					cmb = 0;
					di = 0;
					shprs = 0
				}
			}
			if (sc[o] > 9999) {
				dx[o] = lx[o];
				dy[o] = ly[o];
				l = sc[o] - 1e4;
				if (l < 15) {
					l = Math.floor(l / 1);
					if (l < 13) {
						sptp3(l, dx[o] - 11, dy[o] - 10)
					}
					d = dx[o];
					v = dy[o];
					if (lzac == 1) {
						m = 1 - l * .2
					} else {
						lzac += .02;
						if (lzac > 1) {
							lzac = 1
						}
					}
				} else {
					sc[o] = -9999
				}
			} else {}
		}
	}
	if (d != 0) {
		ctx.beginPath();
		ctx.lineWidth = 6;
		ctx.strokeStyle = "#15cfff";
		ctx.fillStyle = "#15cfff";
		ctx.moveTo(167, 343);
		ctx.lineTo(d, v);
		ctx.globalAlpha = alc(m * .25);
		ctx.stroke();
		ctx.beginPath();
		ctx.lineWidth = 4;
		ctx.strokeStyle = "#15cfff";
		ctx.fillStyle = "#15cfff";
		ctx.moveTo(167, 343);
		ctx.lineTo(d, v);
		ctx.globalAlpha = alc(m * .5);
		ctx.stroke();
		ctx.beginPath();
		ctx.lineWidth = 2;
		ctx.strokeStyle = "#e8f8ff";
		ctx.fillStyle = "#e8f8ff";
		ctx.moveTo(167, 343);
		ctx.lineTo(d, v);
		ctx.globalAlpha = alc(m * 1);
		ctx.stroke();
		ctx.globalAlpha = 1;
		spt2(2, 152, 337)
	} else {
		spt2(1, 152, 337)
	}
	var g = thp2 | 0;
	if (thp3 > fhp) {
		thp2 += (thp3 - thp2) / 5;
		if (g > 0) {
			ctx.drawImage(img, ix[148], iy[148], g, ih[148], 41, 389, g, ih[148])
		}
	}
	if (dhp < fhp) {
		if (g > 0) {
			ctx.drawImage(img, ix[148], iy[148], g, ih[148], 41, 389, g, ih[148])
		}
		dhp += 1;
		if (dhp >= fhp) {
			dhp = fhp;
			gbmx()
		}
	}
	if (dhp > 0) {
		var y = dhp | 0;
		if (y > 0) {
			ctx.drawImage(img, ix[124], iy[124], y, ih[124], 41, 389, y, ih[124])
		}
	}
	var b = 0;
	for (o in cef) {
		f = cef[o];
		if (f.y < 416) {
			b++;
			if (f.sx != 0 && f.sy != 0) {
				f.f += f.fs;
				if (f.f > 4) {
					f.f = 0
				}
				f.x += (f.sx - f.x) / 35;
				f.y += f.sy;
				f.sy += .1;
				spt(89 + 5 * f.t + f.f | 0, f.x, f.y);
				if (f.y > 394) {
					f.y = 394;
					f.sx = 0;
					f.sy = 0;
					f.f = 0;
					f.fs = .25;
					fhp = thp;
					cmbv = -1
				}
			} else {
				f.f += f.fs;
				sptp2(142 + f.f | 0, f.x, f.y);
				if (f.f > 5) {
					f.y = 500;
					delete f
				}
			}
		}
	}
	if (dcmb > 1) {
		cmbc += cmbv;
		if (cmbc > 9) {
			cmbc = 10;
			cmbv = 0
		} else if (cmbc < 1) {
			cmbc = 0;
			cmbv = 0;
			dcmb = 0
		}
		ctx.globalAlpha = cmbc / 10;
		var E = Math.floor(dcmb / 10);
		var S = dcmb - E * 10;
		if (dcmb < 10) {
			spt2(S + 114, 149, 351 - cmbc)
		} else {
			spt2(E + 114, 137, 351 - cmbc);
			spt2(S + 114, 161, 351 - cmbc)
		}
		spt2(Math.floor(cmbf) + 109, 136, 373 - cmbc);
		cmbf += .15;
		if (cmbf > 5) {
			cmbf = 0
		}
		ctx.globalAlpha = 1
	}
	if (cefi > 0 && b == 0) {
		cef = {};
		cefi = 0
	}
	if (bsdmg2 > 0) {
		bsdmg2--;
		if (bsdmg > 0) {
			if (bsdmi == 0) {
				var x = bsdmg * 2;
				chf2.style.webkitTransform = "scale3d(" + cwdpr + "," + cwdpr + ",1) translate3d(" + (Math.floor(Math.random() * x) - bsdmg) + "px, " + (Math.floor(Math.random() * x) - bsdmg) + "px, 0px)";
				bsdmi = 1
			} else {
				chf2.style.webkitTransform = "scale3d(" + cwdpr + "," + cwdpr + ",1) translate3d(0px, 0px, 0px)";
				bsdmi = 0
			}
			if (hthp > 0) {
				bsdmg--
			} else {
				bsdmg -= .1
			}
		}
	}
	sptp2(161, 82, 4);
	scs(1, 5, scr);
	for (o = 0; o < hthp; o++) {
		spt2(187, hthx[o], 6)
	}
	if (efx != -1) {
		if (efx > 0) {
			efx += efs;
			efs -= .2;
			efy += ( - 80 - efy) / 15;
			sptp2(183, efx, efy);
			if (efy < 3) {
				efx = -10;
				efy = -1;
				efs = .2;
				eft = 2;
				if (hthp < 5) {
					if (hthp > 0) {
						hthp++
					}
					eft = 1
				} else {
					scr += 200
				}
				efset()
			}
		} else if (eft == 1) {
			efx += efs;
			var T = efx | 0;
			if (T > -5) {
				efx = -1;
				efs = -1
			} else {
				sptp2(187 + T, 141, -5)
			}
		} else {
			efx += efs;
			var T = efx | 0;
			if (T > -6) {
				efx = -1;
				efs = -1
			} else {
				sptp2(182 + T, 73, -5)
			}
		}
	}
	if (effi > 0) {
		b = 0;
		for (o in eff) {
			f = eff[o];
			if (f.y < 416) {
				b++;
				if (f.sx != 0 && f.sy != 0) {
					f.x += (f.sx - f.x) / 35;
					f.y += f.sy;
					f.sy += .1;
					ctx.globalAlpha = f.a;
					sptp2(184 + f.f | 0, f.x, f.y);
					ctx.globalAlpha = 1;
					if (f.y > f.fs) {
						f.a -= .1;
						if (f.a < 0 || f.y > 394) {
							f.y = 394;
							f.sx = 0;
							f.sy = 0;
							f.f = 0;
							f.fs = 0;
							effi--
						}
					}
				}
			}
		}
		if (effi == 0) {
			eff = {}
		}
	}
	if (hthp < 1) {
		gmovc++;
		var N = gmovc / 200;
		ctx.globalAlpha = N;
		if (gmovc > 200) {
			ctx.globalAlpha = 1;
			gmovc = 999
		}
		ctx.fillStyle = "#232323";
		ctx.fillRect(0, 0, 320, 232);
		ctx.drawImage(img5, 0, 0, 320, 184, 0, 232, 320, 184);
		scs(2, 5, scr);
		ctx.globalAlpha = 1
	}
}
function srt(e, t) {
	e.sort(function(e, n) {
		return e[t] - n[t]
	});
	return e
}
lps = 0;
dvid = -1;